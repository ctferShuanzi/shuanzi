def hex2bin2list(hex_key):
    #hexkey为16进制字符串型密钥
    #把十六进制变成整数再变成二进制，长度不足时前面用0填充
    bin_key=bin(int(hex_key,16))[2:].zfill(64)
    list_key=[]
    for i in bin_key:
        list_key.append(int(i))#把'0'、'1'变成0和1
    return list_key

def pc1(key64):
    #处理密钥（前提：密钥要么为十六进制要么直接为二进制）
    #如果是十六进制就先变为二进制再变成列表
    if key64[0:2]=='0x':
        key64_new=hex2bin2list(key64)
    else:
        key64_new=[int(i) for i in key64]
    #密钥编排中的置换选择1
    pc1Table=[
        57, 49, 41, 33, 25, 17, 9, 1,
        58, 50, 42, 34, 26, 18, 10, 2,
        59, 51, 43, 35, 27, 19, 11, 3,
        60, 52, 44, 36, 63, 55, 47, 39,
        31, 23, 15, 7, 62, 54, 46, 38,
        30, 22, 14, 6, 61, 53, 45, 37,
        29, 21, 13, 5, 28, 20, 12, 4]
    key56=[]
    for i in range(56):
        key56.append(key64_new[pc1Table[i]-1])
    print('置换选择1： ',key56)
    return key56

def left_loop_shift_and_pc2(key56_after_pc1):
    #密钥编排中的左移位数表
    loopTable=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]
    #密钥编排中的置换选择2
    pc2Table=[
        14, 17, 11, 24, 1, 5,
        3, 28, 15, 6, 21, 10,
        23, 19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55,
        30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53,
        46, 42, 50, 36, 29, 32]

    # 产生第1轮的C，D和二者的并集即中间密钥sum
    round_key=[]
    #初始化
    C=key56_after_pc1[:28]
    print('C0=',C)
    D=key56_after_pc1[28:]
    print('D0=',D,'\n')
    # 同理产生后面15轮的C，D和中间密钥sum
    for i in range(1,17):
        #下一轮密钥是本轮密钥左循环移位后的结果
        C=C[loopTable[i-1]:]+C[:loopTable[i-1]]
        print(f'C{i}=:{C}')
        D=D[loopTable[i-1]:]+D[:loopTable[i-1]]
        print(f'D{i}=:{D}')
        #两部分密钥合并
        sum=C+D
        # 再进行置换选择2产生第1-16轮的轮密钥
        k1=[sum[pc2Table[i]-1] for i in range(48) ]
        round_key.append(k1)
        print(f'子密钥k{i}=:{round_key}\n')

    #返回第1-16轮的轮密钥
    return round_key

def XOR(a,b):
    if a==b:
        return 0
    else:
        return 1

def F(R32,single_round_key):
    #R后面的数字表示比特长度
    extendTable=[
        32, 1, 2, 3, 4, 5,
        4, 5, 6, 7, 8, 9,
        8, 9, 10, 11, 12, 13,
        12, 13, 14, 15, 16, 17,
        16, 17, 18, 19, 20, 21,
        20, 21, 22, 23, 24, 25,
        24, 25, 26, 27, 28, 29,
        28, 29, 30, 31, 32, 1]

    #把32bits右密钥扩展为48bits
    R48=[]
    for i in range(48):
        R48.append(R32[extendTable[i]-1])

    #与48bits轮密钥异或
    for i in range(48):
        R48[i]=XOR(R48[i],single_round_key[i])

    #将48bitsR分成8组，每组6bits，第i组用第i个S盒
    R6=[0 for i in range(8)]
    for i in range(8):
        R6[i]=R48[6*i:6*(i+1)]

    #S盒(sBox[8][4][16])8个4行16列
    sBox=[
    #S1
    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
    [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
    [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
    [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],
    #S2
    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
    [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
    [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
    [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],
    #S3
    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
    [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
    [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
    [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],
    #S4
    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
    [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
    [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
    [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],
    #S5
    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
    [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
    [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
    [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],
    #S6
    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
    [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
    [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
    [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],
    #S7
    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
    [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
    [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
    [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],
    #S8
    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
    [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
    [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
    [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

    R4=[0 for i in range(8)]
    for i in range(8):
        R4[i]=sBox[i][2*R6[i][0]+R6[i][5]][8*R6[i][1]+4*R6[i][2]+2*R6[i][3]+R6[i][4]]
        R4[i]=bin(R4[i])[2:].zfill(4)#将十进制变为二进制并补充为4bits
    R32=[]#将8组4bitsR4拼接为32bitsR32，准备进入P盒
    for i in range(8):
        for j in range(4):
            R32.append(int(R4[i][j]))

    #P换位表
    pTable=[
        16, 7, 20, 21,
        29, 12, 28, 17,
        1, 15, 23, 26,
        5, 18, 31, 10,
        2, 8, 24, 14,
        32, 27, 3, 9,
        19, 13, 30, 6,
        22, 11, 4, 25]

    R32_result=[]
    for i in range(32):
        R32_result.append(R32[pTable[i]-1])
    return R32_result

def E_DES(m, key):
    key0 = pc1(key)
    round_key = left_loop_shift_and_pc2(key0)
    # 处理64bits明文（与密钥处理方式相同）
    # 前提：明文要么为十六进制要么直接为二进制）
    # 如果是十六进制就先变为二进制再变成列表
    if m[0:2] == "0x":
        m0 = hex2bin2list(m)
    else:
        m0 = [int(i) for i in m]
    # 初始置换IP表，结果明文总长64bits没变，只是打乱顺序
    ipTable = [
        58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7]
    m1 = []
    for i in range(64):
        m1.append(m0[ipTable[i] - 1])

    # m1分成左右两部分L[0],R[0]
    L = [[] for i in range(17)]
    R = [[] for i in range(17)]
    L[0], R[0] = m1[:32], m1[32:]
    print(f'L0={L[0]}')
    print(f'R0={R[0]}')
    # 调用F(R[i-1],round_key[i-1])函数
    for i in range(1,17):
        temp = F(R[i-1],round_key[i-1])
        temp=[XOR(temp[j],L[i-1][j]) for j in range(32)]
        L[i]=R[i-1]
        R[i]=temp
        print(f'L{i}={L[i]}')
        print(f'R{i}={R[i]}')

    # 将L[16]与R[16]拼接再进行逆初始置换得到密文
    c = R[16]+L[16]
    # 初始逆置换IP^-1表
    ipReverseTable = [
        40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]

    result = []
    for i in range(64):
        result.append(c[ipReverseTable[i] - 1])

    cipher=''
    for c in result:
        cipher+=str(c)
    plain_hex = format(int(cipher, 2), '016x')  # 16 个 hex 字符，不足左补 0
    return '0x' + plain_hex

def D_DES(c, key):
    key0 = pc1(key)
    round_key = left_loop_shift_and_pc2(key0)
    round_key=round_key[::-1]
    # 处理64bits明文（与密钥处理方式相同）
    # 前提：明文要么为十六进制要么直接为二进制）
    # 如果是十六进制就先变为二进制再变成列表
    if c[0:2] == "0x":
        c0 = hex2bin2list(c)
    else:
        c0 = [int(i) for i in c]
    # 初始置换IP表，结果明文总长64bits没变，只是打乱顺序
    ipTable = [
        58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7]
    c1 = []
    for i in range(64):
        c1.append(c0[ipTable[i] - 1])

    # m1分成左右两部分L[0],R[0]
    L = [[] for i in range(17)]
    R = [[] for i in range(17)]
    L[0], R[0] = c1[:32], c1[32:]
    print(f'L0={L[0]}')
    print(f'R0={R[0]}')
    # 调用F(R[i-1],round_key[i-1])函数
    for i in range(1,17):
        temp = F(R[i-1],round_key[i-1])
        temp=[XOR(temp[j],L[i-1][j]) for j in range(32)]
        L[i]=R[i-1]
        R[i]=temp
        print(f'L{i}={L[i]}')
        print(f'R{i}={R[i]}')

    # 将L[16]与R[16]拼接再进行逆初始置换得到密文
    c = R[16]+L[16]
    # 初始逆置换IP^-1表
    ipReverseTable = [
        40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]

    result = []
    for i in range(64):
        result.append(c[ipReverseTable[i] - 1])

    cipher=''
    for c in result:
        cipher+=str(c)
    plain_hex = format(int(cipher, 2), '016x')  # 16 个 hex 字符，不足左补 0
    return '0x' + plain_hex

if __name__=="__main__":
    m1='0x3031323334353637'
    key1='0x3132333435363738'
    c1=E_DES(m1,key1)
    print(f"plaintext:{m1}→ciphertext:{c1}→recover:{D_DES(c1,key1)}")
    m2='0x0123456789abcdef'
    key2='0x1f1f1f1f0e0e0e0e'
    c2=E_DES(m2,key2)
    print(f"plaintext:{m2}→ciphertext:{c2}→recover:{D_DES(c2, key2)}")
